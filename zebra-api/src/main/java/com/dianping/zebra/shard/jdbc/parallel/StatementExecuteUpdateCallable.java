package com.dianping.zebra.shard.jdbc.parallel;

import java.sql.Statement;
import java.util.concurrent.Callable;

public class StatementExecuteUpdateCallable implements Callable<UpdateResult> {

	private Statement stmt;
	private String sql;
	private int autoGeneratedKeys;
	private int[] columnIndexes;
	private String[] columnNames;

	public StatementExecuteUpdateCallable(Statement stmt, String sql, int autoGeneratedKeys, int[] columnIndexes,
			String[] columnNames) {
		this.stmt = stmt;
		this.sql = sql;
		this.autoGeneratedKeys = autoGeneratedKeys;
		this.columnIndexes = columnIndexes;
		this.columnNames = columnNames;
	}

	@Override
	public UpdateResult call() throws Exception {
		int affectedRows = 0;
		if (autoGeneratedKeys == -1 && columnIndexes == null && columnNames == null) {
			affectedRows += stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
		} else if (autoGeneratedKeys != -1) {
			affectedRows += stmt.executeUpdate(sql, autoGeneratedKeys);
		} else if (columnIndexes != null) {
			affectedRows += stmt.executeUpdate(sql, columnIndexes);
		} else if (columnNames != null) {
			affectedRows += stmt.executeUpdate(sql, columnNames);
		} else {
			affectedRows += stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
		}

		// 把insert语句返回的生成key保存在当前会话中
		if (autoGeneratedKeys != -1 && (sql.trim().charAt(0) == 'i' || sql.trim().charAt(0) == 'I')) {
			return new UpdateResult(affectedRows, stmt.getGeneratedKeys());
		}

		return new UpdateResult(affectedRows);
	}
}
